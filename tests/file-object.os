Перем юТест;

Функция Версия() Экспорт
	Возврат "0.1";
КонецФункции

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСуществованиеФайлаНеКешируетсяПослеУдаления");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСуществованиеФайлаНеКешируетсяПослеСоздания");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСуществованиеКаталогаНеКешируетсяПослеСоздания");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСуществованиеКаталогаНеКешируетсяПослеУдаления");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоДляДиректорииВозвращаетсяРодитель");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоВозвращаетсяРазмер");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоДляКаталогаВозвращаетсяВремяИзменения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоНесуществующийФайлНельзяПроверитьНаФайлКаталог");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИмени");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеПолногоИмени");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеРасширения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИмениБезРасширения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеКаталога");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьАтрибутПутьУФайлаВКорневомКаталоге");
	
	Возврат ВсеТесты;
КонецФункции

Процедура ТестДолжен_ПроверитьЧтоСуществованиеФайлаНеКешируетсяПослеУдаления() Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла("os");
	ЗаписьТекста = Новый ЗаписьТекста(ВремФайл);
	ЗаписьТекста.ЗаписатьСтроку("---");
	ЗаписьТекста.Закрыть();
	
	Файл = Новый Файл(ВремФайл);
	ФайлФактический = Новый Файл(ВремФайл);
	
	юТест.ПроверитьИстину(Файл.Существует());
	УдалитьФайлы(Файл.ПолноеИмя);
	// проверили, что он реально удален
	юТест.ПроверитьЛожь(ФайлФактический.Существует());
	юТест.ПроверитьЛожь(Файл.Существует());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСуществованиеФайлаНеКешируетсяПослеСоздания() Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла("os");
	Файл = Новый Файл(ВремФайл);
	
	юТест.ПроверитьЛожь(Файл.Существует());
	
	ЗаписьТекста = Новый ЗаписьТекста(ВремФайл);
	ЗаписьТекста.ЗаписатьСтроку("---");
	ЗаписьТекста.Закрыть();
	
	юТест.ПроверитьИстину(Файл.Существует());
	
	УдалитьФайлы(Файл.ПолноеИмя);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСуществованиеКаталогаНеКешируетсяПослеСоздания() Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла("os");
	
	Файл = Новый Файл(ВремФайл);
	ФайлФактический = Новый Файл(ВремФайл);
	юТест.ПроверитьЛожь(Файл.Существует(), "файл существует но не должен");
	
	СоздатьКаталог(ВремФайл);
	
	юТест.ПроверитьИстину(Файл.Существует());
	
	УдалитьФайлы(Файл.ПолноеИмя);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСуществованиеКаталогаНеКешируетсяПослеУдаления() Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла("os");
	
	СоздатьКаталог(ВремФайл);
	
	Файл = Новый Файл(ВремФайл);
	юТест.ПроверитьИстину(Файл.Существует());
	УдалитьФайлы(Файл.ПолноеИмя);
	юТест.ПроверитьЛожь(Файл.Существует());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоВозвращаетсяРазмер() Экспорт
	
	ФайлТеста = Новый Файл(ТекущийСценарий().Источник);
	юТест.ПроверитьНеравенство(0, ФайлТеста.Размер());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоНесуществующийФайлНельзяПроверитьНаФайлКаталог() Экспорт
	
	Путь = ПолучитьИмяВременногоФайла();
	Файл = Новый Файл(Путь);

	Попытка
		Сообщить(Файл.ЭтоФайл());
	Исключение
		Сообщить("Все хорошо про файл");
	КонецПопытки;
	
	Попытка
		Сообщить(Файл.ЭтоКаталог());
	Исключение
		Сообщить("Все хорошо про каталог");
		Возврат;
	КонецПопытки;
	
	ВызватьИсключение "Должно было быть выдано исключение, но его не было";
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоДляДиректорииВозвращаетсяРодитель() Экспорт
	
	КаталогВФ = КаталогВременныхФайлов();
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	
	Попытка
		ФайлПроверка = Новый Файл(ВременныйКаталог);
		юТест.ПроверитьРавенство(КаталогВФ, ФайлПроверка.Путь);
		юТест.ПроверитьРавенство(ПолучитьРазделительПути(), Прав(ФайлПроверка.Путь,1));
	Исключение
		УдалитьФайлы(ВременныйКаталог);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоДляКаталогаВозвращаетсяВремяИзменения() Экспорт
	
	Каталог = Новый Файл(ТекущийСценарий().Каталог);
	
	юТест.ПроверитьИстину(Каталог.ПолучитьВремяИзменения() <> Неопределено);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИмени() Экспорт
	
	Файл = Новый Файл(ТекущийСценарий().Источник);
	юТест.ПроверитьРавенство("file-object.os", Файл.Имя);
	
	КаталогСкрипта = Новый Файл(Файл.Путь);
	юТест.ПроверитьРавенство("tests", КаталогСкрипта.Имя);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИмениБезРасширения() Экспорт
	
	Файл = Новый Файл(ТекущийСценарий().Источник);
	юТест.ПроверитьРавенство("file-object", Файл.ИмяБезРасширения);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеПолногоИмени() Экспорт
	
	Файл = Новый Файл(ТекущийСценарий().Источник);
	юТест.ПроверитьРавенство(ТекущийСценарий().Источник, Файл.ПолноеИмя);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеРасширения() Экспорт
	
	Файл = Новый Файл(ТекущийСценарий().Источник);
	юТест.ПроверитьРавенство(".os", Файл.Расширение);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеКаталога() Экспорт
	Файл = Новый Файл(ТекущийСценарий().Источник);
	юТест.ПроверитьРавенство(ТекущийСценарий().Каталог + ПолучитьРазделительПути(), Файл.Путь);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьАтрибутПутьУФайлаВКорневомКаталоге() Экспорт

	ИмяФайла = "C:\";
	Файл = Новый Файл(ИмяФайла);
	юТест.ПроверитьРавенство(Файл.ПолноеИмя, "C:\", "Файл.ПолноеИмя");
	юТест.ПроверитьРавенство(Файл.Путь, "C:\", "Файл.Путь");

КонецПроцедуры
