<Project Sdk="Microsoft.NET.Sdk">
    <Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets" />
    
    <PropertyGroup>
        <ReleaseNumber Condition="'$(ReleaseNumber)' == ''">1.1.0</ReleaseNumber>
        <BuildNumber Condition="'$(BUILD_NUMBER)' != ''">$(BUILD_NUMBER)</BuildNumber>
        <BuildNumber Condition="'$(BUILD_NUMBER)' == ''">0</BuildNumber>

        <ArtifactsRoot>$(MSBuildProjectDirectory)/built</ArtifactsRoot>
        <Solution>$(MSBuildProjectDirectory)/src/1Script.sln</Solution>
        <Configuration>Release</Configuration>
    </PropertyGroup>
    
    <ItemGroup>
        <PlatformItem Include="x86">
            <MSBuildName>x86</MSBuildName>
            <BinFolder>bin32</BinFolder>
        </PlatformItem>
        <PlatformItem Include="x64">
            <MSBuildName>Any CPU</MSBuildName>
            <BinFolder>bin</BinFolder>
        </PlatformItem>
    </ItemGroup>

    <Target Name="CleanAll">
    
        <ItemGroup>
            <TestsResults Include="$(MSBuildProjectDirectory)/tests/*.os.xml" />
        </ItemGroup>
    
        <Delete Files="@(TestsResults)" />
        <DeleteTree Directories="$(ArtifactsRoot)" Condition="Exists($(ArtifactsRoot))" />

        <MSBuild Projects="$(Solution)" Targets="Clean" Properties="ReleaseNumber=$(ReleaseNumber);Configuration=$(Configuration);Platform=%(PlatformItem.MSBuildName)"/>
        
    </Target>  
        <Target Name="Make">
        <MSBuild Projects="$(Solution)" Targets="restore;Build" Properties="ReleaseNumber=$(ReleaseNumber);Configuration=$(Configuration);Platform=%(PlatformItem.MSBuildName);"/>
    </Target>

    <Target Name="CreateDistributions" DependsOnTargets="CreateInstaller;CreateNuget;CreateZip">
        <ItemGroup>
            <TempContent Include="$(ArtifactsRoot)/tmp"/>
            <TempContent Include="$(MDDocFolder)"/>
        </ItemGroup>
        <DeleteTree Directories="@(TempContent)"/>
    </Target>

    <Target Name="PrepareArtifactsRoot">
        <PropertyGroup>
            <TempFolder>$(ArtifactsRoot)/tmp</TempFolder>
            <LibFolder>$(TempFolder)/lib</LibFolder>
            <ToolFolder>$(TempFolder)/bin</ToolFolder>
            <ExamplesFolder>$(TempFolder)/examples</ExamplesFolder>
            <DocFolder>$(TempFolder)/doc</DocFolder>
            <DebugDest>$(ArtifactsRoot)\vscode\</DebugDest>
            <MDDocFolder>$(ArtifactsRoot)/mddoc</MDDocFolder>
        </PropertyGroup>
        <MakeDir Directories="$(ArtifactsRoot)" />
        <MakeDir Directories="$(TempFolder)" />
    </Target>
    
    <Target Name="PrepareDistributionContent">
        
        <CallTarget Targets="GatherBinaries" />
        <CallTarget Targets="GatherLibrary" />
        <CallTarget Targets="GatherExamples" />
        <CallTarget Targets="GatherDocuments"  Condition=" '$(OneScriptDocumenter)' != '' "/>
        <CallTarget Targets="CleanIntermediates"/>
        
    </Target>
    
    <!-- Собирает отовсюду содержимое папки bin -->
    <Target Name="GatherBinaries" DependsOnTargets="Make;PrepareArtifactsRoot">
        <ItemGroup>
            <BuiltProjects Include="oscript" />
            <BuiltProjects Include="TestApp" />
            <BinaryFiles Include="$(MSBuildProjectDirectory)/src/%(BuiltProjects.Identity)/bin/$(Configuration)/net452/**">
                <Dest>$(TempFolder)/bin</Dest>
            </BinaryFiles>
            <BinaryFiles Include="$(MSBuildProjectDirectory)/src/%(BuiltProjects.Identity)/bin/x86/$(Configuration)/net452/**">
                <Dest>$(TempFolder)/bin32</Dest>
            </BinaryFiles>
            <AspFiles Include="$(MSBuildProjectDirectory)/src/ASPNETHandler/bin/$(Configuration)/net452/ASPNETHandler.dll"/>
        </ItemGroup>

        <ItemGroup>
            <BuiltProjects Include="ScriptEngine.NativeApi" />
            <BinaryFiles Include="$(MSBuildProjectDirectory)/src/%(BuiltProjects.Identity)/bin/$(Configuration)/net452/*.dll">
                <Dest>$(TempFolder)/bin</Dest>
            </BinaryFiles>
            <BinaryFiles Include="$(MSBuildProjectDirectory)/src/%(BuiltProjects.Identity)/bin/x86/$(Configuration)/net452/*.dll">
                <Dest>$(TempFolder)/bin32</Dest>
            </BinaryFiles>
        </ItemGroup>
           
        <Copy SourceFiles="@(BinaryFiles)" DestinationFiles="@(BinaryFiles->'%(Dest)/%(Filename)%(Extension)')" />
        <Copy SourceFiles="@(AspFiles)" DestinationFolder="%(BinaryFiles.Dest)"/>
        <!-- Копирование скрипта запуска для opm -->
        <Copy SourceFiles="$(MSBuildProjectDirectory)\install\opm.bat" DestinationFolder="%(BinaryFiles.Dest)"/>

        <PropertyGroup>
            <DebugSrc>$(MSBuildProjectDirectory)/src/VSCode.DebugAdapter/bin/$(Configuration)/net452</DebugSrc>
        </PropertyGroup>
        <ItemGroup>
            <DbgBinFiles Include="$(DebugSrc)/*.dll"/>
            <DbgBinFiles Include="$(DebugSrc)/*.exe"/>
            <DbgBinFiles Include="$(DebugSrc)/*.config"/>
            <DbgPackageFiles Include="$(DebugSrc)/README.md"/>
            <DbgPackageFiles Include="$(DebugSrc)/package.json"/>
            <DbgImageFiles Include="$(DebugSrc)/images/**"/>
        </ItemGroup>

        <Copy SourceFiles="@(DbgBinFiles)" DestinationFolder="$(DebugDest)/bin"/>
        <Copy SourceFiles="@(DbgPackageFiles)" DestinationFolder="$(DebugDest)"/>
        <Copy SourceFiles="@(DbgImageFiles)" DestinationFolder="$(DebugDest)/images"/>

        <Exec WorkingDirectory="$(TempFolder)" Command="&quot;$(ToolFolder)/oscript.exe&quot; -version > VERSION"/>
    </Target>

    <!-- Собирает в целевой папке содержимое папки lib -->
    <Target Name="GatherLibrary" DependsOnTargets="Make;GatherBinaries">
        
        <MakeDir Directories="$(LibFolder)" />
        <CallTarget Targets="InstallStdLib" Condition="'$(StandardLibraryPacks)' != ''"/>
        <DeleteTree Directories="$(LibFolder)/opm" />

        <Exec Command="&quot;$(ToolFolder)/oscript.exe&quot; &quot;$(MSBuildProjectDirectory)\install\unicode-zipper.os&quot; unpack &quot;$(MSBuildProjectDirectory)\install\opm-0.16.2.ospx&quot; &quot;$(LibFolder)\tmp&quot;"/>
        <Exec Command="&quot;$(ToolFolder)/oscript.exe&quot; &quot;$(MSBuildProjectDirectory)\install\unicode-zipper.os&quot; unpack &quot;$(LibFolder)\tmp\content.zip&quot; &quot;$(LibFolder)/opm&quot;"/>
        
        <Copy SourceFiles="$(MSBuildProjectDirectory)\install\oscript-config.exe" DestinationFolder="$(TempFolder)/%(PlatformItem.BinFolder)" />
        <Copy SourceFiles="$(MSBuildProjectDirectory)\install\package-loader.os" DestinationFolder="$(LibFolder)"/>

        <DeleteTree Directories="$(LibFolder)\tmp"/>

    </Target>

    <!-- Копирует поставляемые файлы stdlib, если они есть на машине сборки -->
    <Target Name="InstallStdLib">
        <ItemGroup>
            <LibraryFiles Include="$(StandardLibraryPacks)\**\*" Exclude="package-loader.os"/>
        </ItemGroup>
        <Copy SourceFiles="@(LibraryFiles)" DestinationFolder="$(LibFolder)\%(RecursiveDir)"/>
    </Target>
    
    <!-- Собирает в целевой папке содержимое папки examples -->
    <Target Name="GatherExamples" DependsOnTargets="PrepareArtifactsRoot">
        <ItemGroup>
            <ExampleFiles Include="$(MSBuildProjectDirectory)\install\examples\**\*"/>
        </ItemGroup>
        <MakeDir Directories="$(ExamplesFolder)" />
        <Copy SourceFiles="@(ExampleFiles)" DestinationFolder="$(ExamplesFolder)\%(RecursiveDir)"/> 
    </Target>
    
    <!-- Собирает в целевой папке содержимое папки doc -->
    <Target Name="GatherDocuments" DependsOnTargets="PrepareArtifactsRoot;GenerateDocs">
        <MakeDir Directories="$(DocFolder)"/>
        <Exec Command="$(OneScriptDocumenter) html $(TMP)\tempdoc.xml &quot;$(DocFolder)&quot;"/>
    </Target>
    
    <!-- Генерирует необходимую документацию -->
    <Target Name="GenerateDocs">
    
        <Exec Command="$(OneScriptDocumenter) $(TMP)\tempdoc.xml &quot;$(ToolFolder)\ScriptEngine.dll&quot; &quot;$(ToolFolder)\ScriptEngine.HostedScript.dll&quot; &quot;$(ToolFolder)\oscript.exe&quot;"/>
        <MakeDir Directories="$(MDDocFolder)"/>
        <Exec Command="$(OneScriptDocumenter) markdown $(TMP)\tempdoc.xml &quot;$(MDDocFolder)&quot; /syntax/page"/>
    
    </Target>
    
    <!-- Чистка промежуточных файлов -->
    <Target Name="CleanIntermediates">
        <ItemGroup>
            <ExcludedArtifacts Include="$(TempFolder)/%(PlatformItem.BinFolder)/*.pdb" />
            <ExcludedArtifacts Include="$(TempFolder)/%(PlatformItem.BinFolder)/*.xml" />
            <!-- остается от документера. Надо починить его чтобы писал куда-то в другое место -->
            <ExcludedArtifacts Include="$(MSBuildProjectDirectory)/map.json"/>
        </ItemGroup>
        <Delete Files="@(ExcludedArtifacts)"/>
    </Target>

    <!-- Инсталлятор -->
    <Target Name="CreateInstaller" DependsOnTargets="PrepareArtifactsRoot">
        <Error Text="No installer path is specified" Condition="'$(InnoSetupPath)' == ''"/>
        <PropertyGroup>
            <InstallerStandardPath>"$(InnoSetupPath)\iscc.exe"</InstallerStandardPath>
            <DistPath>$(ArtifactsRoot)</DistPath>
        </PropertyGroup>
        
        <Exec Command="$(InstallerStandardPath) /o&quot;$(DistPath)&quot; /DSuffix=%(PlatformItem.Identity) &quot;$(MSBuildProjectDirectory)\install\install.iss&quot;"/>
        
    </Target>

    <!-- Nuget -->
    <Target Name="CreateNuget" DependsOnTargets="PrepareArtifactsRoot">
        <ItemGroup>
            <NugetAbleProject Include="ScriptEngine"/>
            <NugetAbleProject Include="ScriptEngine.HostedScript"/>
            <NugetAbleProject Include="OneScript.Language"/>
			<NugetAbleProject Include="OneScript.DebugServices"/>
			<NugetAbleProject Include="OneScript.DebugProtocol"/>
        </ItemGroup>
        
        <MSBuild Projects="src/%(NugetAbleProject.Identity)/%(NugetAbleProject.Identity).csproj" Targets="pack" Properties="PackageOutputPath=$(ArtifactsRoot);ReleaseNumber=$(ReleaseNumber)"/>
    
    </Target>

    <!-- ZIP -->
    <Target Name="CreateZip" DependsOnTargets="PrepareArtifactsRoot">
        
        <Exec Command="&quot;$(MSBuildProjectDirectory)\install\prepare-zip.cmd&quot; $(TempFolder) %(PlatformItem.Identity)"/>

        <Exec Command="&quot;$(ToolFolder)\oscript.exe&quot; &quot;$(MSBuildProjectDirectory)\install\unicode-zipper.os&quot; pack &quot;$(TempFolder)/zip%(PlatformItem.Identity)/*&quot; &quot;$(ArtifactsRoot)/OneScript-$(ReleaseNumber)-%(PlatformItem.Identity).zip&quot;"/>
        <Exec Command="&quot;$(ToolFolder)\oscript.exe&quot; &quot;$(MSBuildProjectDirectory)\install\unicode-zipper.os&quot; pack &quot;$(MDDocFolder)/*&quot; &quot;$(ArtifactsRoot)/mddoc-$(ReleaseNumber).zip&quot;"/>
    </Target>

    <!-- MSI -->
    <Target Name="CreateMSI">
        <MSBuild Projects="$(MSBuildProjectDirectory)\src\Installer\Installer.wixproj"
                    Properties="Configuration=$(Configuration);OutputPath=$(ArtifactsRoot);OutputPathForBuild=$(ArtifactsRoot);Version=$(ReleaseNumber).$(BuildNumber)" />
    </Target>


    <Target Name="xUnitTest" DependsOnTargets="PrepareArtifactsRoot">

        <CreateItem Include="$(MSBuildProjectDirectory)\tests\*.os.xml">
            <Output TaskParameter="Include" ItemName="RemoveXMLTestResult" />
        </CreateItem>

        <Delete Files="@(RemoveXMLTestResult)" />

        <Exec WorkingDirectory="$(MSBuildProjectDirectory)\tests" Command="&quot;$(ToolFolder)/oscript.exe&quot; &quot;$(MSBuildProjectDirectory)\tests\testrunner.os&quot; -runall . xddReportPath ." IgnoreExitCode="true"/>

    </Target>

    <Target Name="PublishNuget">
        <ItemGroup>
            <NugetAbleProject Include="OneScript"/>
            <NugetAbleProject Include="OneScript.StandardLibrary"/>
            <NugetAbleProject Include="OneScript.Language"/>
			<NugetAbleProject Include="OneScript.DebugServices"/>
			<NugetAbleProject Include="OneScript.DebugProtocol"/>
        </ItemGroup>
        
        <Error Text="No nuget token (/p:NugetToken=) specified" Condition="'$(NugetToken)' == ''" />
        <Exec WorkingDirectory="$(MSBuildProjectDirectory)\built"
            Command="dotnet nuget push %(NugetAbleProject.Identity).$(ReleaseNumber).nupkg -k $(NugetToken) -s https://api.nuget.org/v3/index.json"/>
        
    </Target>
    
</Project>
